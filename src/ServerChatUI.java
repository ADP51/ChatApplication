/*
File Name:  ServerChatUI.java
Author:     Andrew Palmer , 040719945
Course:     CST8221 - JAP 302
Assignment: 2 part 1
Date:       2019-11-19
Professor:  Daniel Cormier
Purpose:    To create the server chat GUI and implement the controller for all of the inputs
Class List: ServerChatUI, Controller
 */
import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.net.Socket;

/**
 * The ServerChatUI class is responsible for creating the client chat GUI and implementing a controller for it.
 * @author Andrew Palmer
 * @version 1.0
 * @see JFrame
 * @since 1.8.192
 */
public class ServerChatUI extends JFrame {

    /**
     * The socket to be passed from the connecting client
     */
    Socket socket;

    /**
     * Class Constructor, takes in a socket obj as a parameter assigns it to the
     * socket field, the creates a frame using set frame and passing createUI to
     * populate it.
     * @param socket the socket given
     */
    public ServerChatUI(Socket socket) {
        this.socket = socket;
        setFrame(createUI());
        runClient();
    }

    /**
     * Responsible for creating the GUI and adding the controllers to all inputs
     * @return JPanel containing GUI content
     */
    public JPanel createUI() {
        ServerChatUI.Controller controller = new ServerChatUI.Controller(); // the main controller
        JPanel main = new JPanel(new BorderLayout()); // The parent Panel

        /***************************************************
         The Message box for the GUI
         ***************************************************/
        JPanel message = new JPanel(new BorderLayout());
        //set up the titled border
        TitledBorder messageTitle = new TitledBorder("MESSAGE");
        messageTitle.setBorder(BorderFactory.createMatteBorder(10,10,10,10,Color.BLACK));
        messageTitle.setTitle("MESSAGE");
        message.setBorder(messageTitle);
        //set up the message text field
        JTextField messageField = new JTextField();
        messageField.setText("Type Message");
        message.add(messageField, BorderLayout.CENTER);
        //set up the send button
        JButton send = new JButton("Send");
        send.addActionListener(controller);
        send.setActionCommand("Send");
        send.setEnabled(false);
        send.setOpaque(true);
        message.add(send, BorderLayout.EAST);

        main.add(message, BorderLayout.NORTH); //add the message block to main panel

        /*****************************************
        The chat display components
         *****************************************/
        JPanel chatDisplay = new JPanel(new BorderLayout());
        //set up the titled border
        TitledBorder chatTitle = new TitledBorder("CHAT DISPLAY");
        chatTitle.setBorder(BorderFactory.createMatteBorder(10,10,10,10,Color.BLUE));
        chatTitle.setTitle("CHAT DISPLAY");
        chatTitle.setTitleJustification(TitledBorder.CENTER);
        chatDisplay.setBorder(chatTitle);
        //set up the text area and add it into a scroll pane
        JTextArea chat = new JTextArea();
        chat.setColumns(45);
        chat.setRows(30);
        chat.setAutoscrolls(true);
        JScrollPane scrollPane = new JScrollPane(chat);
        chatDisplay.add(scrollPane, BorderLayout.CENTER);

        main.add(chatDisplay, BorderLayout.CENTER); //add chat block to main panel

        return main;
    }

    /**
     * Set the content pane of this class with the JPanel passed to it
     * @param panel the panel to add to the frame
     */
    private final void setFrame(JPanel panel) {
        this.setContentPane(panel);
    }

    /**
     * To be implemented in part 2 of this assignment
     */
    private void runClient() {
        //TODO implement in part 2
    }

    /**
     * Custom controller to close the window generated by the GUI
     * @author Andrew Palmer
     * @version 1.0
     * @see WindowAdapter
     * @since 1.8.192
     */
    private class WindowController extends WindowAdapter {
        @Override
        public void windowClosing(WindowEvent e) {
            System.exit(0);
        }
    }

    /**
     * Custom controller for the GUI buttons
     * @author Andrew Palmer
     * @version 1.0
     * @see ActionListener
     * @since 1.8.192
     */
    private class Controller implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            //TODO complete in part 2
        }
    }
}
